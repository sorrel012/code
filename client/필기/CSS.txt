
/* CSS, Cascading Style Sheet */
    - HTML 서식을 담당하는 언어
    - 독립 실행이 안 된다. 반드시 HTML 코드가 있어야 CSS실행이 가능하다.
        > 모든 ML의 디자인을 담당하는 언어
    - CSS1, CSS2, CSS3(+HTML5)
    - HTML 서식 기능 > CSS 서식 기능(확장) + 생산성


/* HTML 문서에 CSS를 적용하는 방법*/   

    1. 인라인 스타일 시트, Inline Style Sheet
        - <태그 style="">
        - 태그에 style 속성 추가하기
        - 모든 태그는 style 속성을 가진다.
        - 서식을 태그에 직접 적용한다.
        - 특정 부분에 대한 서식 정의(잘 사용 안 함)
        - 장점: 가독성이 높다.
        - 단점: CSS 재사용이 불가능하다.

    2. 내부 스타일 시트, Embeded Style Sheet
        - <style> 태그 내에 CSS를 작성한다.
        - 문서 내의 여러 태그에 한번에 서식을 적용할 수 있다.
        - 현재 페이지에서 반복되는 서식 정의
        - 장점: CSS 재사용이 가능하다.
        - 단점: 가독성이 떨어진다.


    3. 외부 스타일 시트, External Style Sheet
        -*.css 파일에 CSS를 작성한다.
        - <link> 태그를 사용해서 참조
        - 사이트 내의 모든 페이지 공통 서식 정의
        - 장점: CSS 재사용률이 높다.(모든 문서에 적용 가능)
        - 단점: 여러 페이지의 서식을 한 곳에 작성하기 때문에 가독성이 최악이다.


/* CSS 서식 적용 */
    - 원하는 태그(들)를 찾아서 태그 자체 or 태그 내용물에 원하는 서식을 적용
    - CSS의 대부분의 속성은 모든 태그에 적용이 가능하다.★★★


/* CSS 문법 */
    - 선택자 { 
        속성명: 값; {속성명: 값} }

    1. 선택자: 문서 내에서 원하는 태그를 검색
    2. 속성: 서식의 종류
    3. 값: 서식의 값


/* CSS 선택자, CSS Selector*/
    - HTML 문서 내에서 서식을 적용하려는 대상 태그를 검색하는 도구

    1. 전체 선택자
        - 모든 태그를 선택한다. > 와일드 카드
        - 모든 태그에 동일한 서식을 적용할 때 사용
        ~ * {속성명: 값;}
    -------------------------------------------------------------------------------
    2. 태그 선택자
        - 태그명을 가지고 원하는 태그를 선택한다.
        - 검색된 모든 태그에 일괄 적용한다. > 생산성이 높다.
            > 단점이 되기도 함.
        - 사용이 쉽다.
        ~ 태그명 {속성명: 값;}

    3. ID 선택자
        - 태그에 명시된 id 속성을 검색해서 태그를 선택한다.
        - 원하는 태그를 직접 선택할 수 있다.
        - 일괄 적용이 안 된다.
        ~ 태그명#ID명 {속성명: 값;}
        ~ #ID명 {속성명: 값;} > 태그명은 생략 가능(자동으로 *이 붙은 것으로 인식)

    4. Class 선택자
        - 태그에 명시된 class 속성을 검색해서 태그를 선택
        - class는 그룹을 묶기 위한 식별자이다. > 일괄 적용이 된다.
        ~ 태그명.클래스명 {속성명: 값;}
        ~ .클래스명 {속성명: 값;} > 태그명 생략 가능(자동으로 *이 붙은 것으로 인식)
            ※ 클래스명은 여러 개에 동일하게 사용될 수 있기 때문에 생략할 떄 주의!
    -------------------------------------------------------------------------------
    5. 나머지 선택자
        - 태그 선택자, ID 선택자, Class 선택자를 조합해서 만든다.

        a. 그룹 선택자
            - 2개 이상의 선택자를 한번에 적용하는 방법
            ~ 선택자, 선택자 , 선택자... { 구현부; }

        b. 자식 선택자, Child Selector
            - 부모를 조건으로 자식을 선택한다.
            - 구체적
            - 정밀도 높음 + 범위 좁음
            ~ 선택자 > 선택자 {구현부;}

        c. 자손 선택자, Descendant Selector
            - 조상을 조건으로 자식을 선택한다.
            - 정밀도 낮음 + 범위 넓음
            ~ 선택자 선택자 {구현부;}

        d. 인접 형제 선택자, Adjacent Sibling Selector
            - 정밀도 높음 + 범위 좁음 > 바로 위에 있는 형만
            - 자식 선택자 느낌
            ~ 선택자 + 선택자 {구현부;} 

        e. 형제 선택자, Sibling Selector
            - 정밀도 낮음 + 범위 넓음 > 위에 있는 형이기만 하면 ok
            - 자손 선택자 느낌
            ~ 선택자 ~ 선택자 {구현부;}    
    -------------------------------------------------------------------------------         
    6. 속성 선택자
        a. 선택자[속성명]     : 해당 속성을 명시했는지?
        b. 선택자[속성명=값]  : 해당 속성과 값을 명시했는지?
        c. 선택자[속성명^=값] : 속성값이 값으로 시작하는지? startsWith()
        d. 선택자[속성명$=값] : 속성값이 값으로 끝나는지? endsWith()
        e. 선택자[속성명*=값] : 속성값이 포함되는지? contains() or like '%값'   
    -------------------------------------------------------------------------------    
    7. 가상 선택자 
    
        a. 가상 클래스, Pseudo Class
            - 실제 태그에 class 속성에 명시되어 있지 않은데 선택자에서는 진짜 존재하는 클래스처럼 사용하는 클래스
            - 원래는 <a> 태그만 지원 > 모든 태그 확장 + 종류 증가
                ~ a:link {구현부;} : 브라우저가 한번도 방문하지 않은 상태
                ~ a:visited {구현부;} : 브라우저가 방문했던 상태
                ~ a:active {구현부;} : 활성화 상태
                ~ a:hover {구현부;} : 마우스 커서가 올라가 있는 상태


                ~ :first-child
                    - 검색된 태그 자체를
                ~ :last-child
                ~ :nth-child(n)
                ~ :nth-last-child(name)

                * n
                1. 숫자: index(위치) > 1부터 시작
                2. 수열: 2n, 2n+1 
                3. 수열: even, odd
                
        b. 가상 요소, Pseudo Element
            - 전후 선택자
            ~ ::before = :before
                - 검색된 태그 주변을 조작
            ~ ::after = :after                        
            

/* 충돌 */
    - 선택자 충돌
    - 동일한 태그를 서로 다른 선택자가 동시에 선택했을 때
    
    - 선택자 우선순위
        - 충돌이 발생하면 우선순위가 가장 높은 선택자가 적용된다.

        - 점수 계산
            1. 태그 선택자      > 1점   > "사람"
            ---------------------------------------------
            2. 클래스 선택자    > 10점  > "남자"
            ---------------------------------------------
            3. ID 선택자        > 100점 > "홍길동'

        - 태그 선택자 1000개가 모여도 클래스 선택자 1개를 이길 수 없다.


/* Emmet, Zen-Coding */
    - CSS 선택자 문법을 사용해서 HTML/CSS 코드를 손쉽게 작성하는 기능
    - 생산성 도구
    - https://emmet.io/


/* 배경 */
    1. 배경색
        - backgroud-color
        
    2. 배경 이미지
        - backgroud-image
        - backgroud-repeat
        - backgroud-position
            - 수평: left|center|right
            - 수직: top|center|bottomB
            - 수치(px): 절대위치
            - 수치(%): 상대위치
        - backgroud-size
            ~ auto: 원래 배경 이미지 크기
            ~ contain: 배경 이미지가 다 들어오게 확대/축소
            ~ cover: 배경 이미지가 여백 없이 다 들어오게 확대/축소


/* CSS 색상 표현법 */
    1. Color name: red, yellow, blue ...
    2. RGB color(HEX): #FF0055
    3. RGB color(DEC): rgb(255,0,128)
    4. RGBA color(DEC): rgba(255,255,255,1)
        - a(alpha channel): 불투명도(0~1)


/* 텍스트 */    
    - 폰트: 그림(x), 벡터 > 공식(o)    

    ~ colo: 텍스트 색상, 전경색(forecolor)
    ~ text-align: 텍스트 수평 정렬
    ~ font-color: 텍스트 크기
        - 보통 10pt ~ 11pt / 12px ~ 16px
        - 수치 데이터는 반드시 단위 표기를 해야 한다.(단위 생략 불가능)
    ~ line-height: 줄 간격 
        - %, em(rem)
        - 보통 140~180%
    ~ font-style: 스타일
        ~~ oblique
        ~~ italic
        ~~ normal
    ~ font-weight: 두께
        ~~ bold
        ~~ normal
    ~ word-spacing: 단어 간격
    ~ letter-spacing: 자간
    ~ text-decoration: 꾸밈
    ~ font-family: 글꼴(폰트)
        - 페이지의 폰트는 서버측 폰트를 사용하는 것이 아니라, 브러우저가 설치된 컴퓨터의 폰트를 사용한다. > 비용, 저작권 문제
        - 서버 & 클라이언트 양쪽 모두에 설치된 폰트만 사용

        - 폰트 예약어
            1. serif: 획끝에 장식이 있는 폰트(궁서체, 바탕체)
            2. sans-serif: 획끝에 장식이 없는 폰트(돋움체, 굴림체)
            3. monospace: 문자폭이 균일한 폰트(궁서체)
            4. cursive: 장식체
            5. fantasy: 장식체

        - 웹폰트
            - 폰트를 서버로부터 다운로드 받아서 사용하는 기술(스트리밍)
            - 사용 기간은 일시적 > 현재 접속중에만 유효
            - 제작(*.eof)
            - 서비스 업체를 사용
            

/* 박스 모델, Box Model */
    - 모든 태그는 사각형으로 렌더링(출력) 된다.
    - 태그가 화면에 출력될 때 공통된 성질에 관련된 정책(모델)

    1. 테두리, border
        - 모든 태그는 자신의 영역을 가진다.
        - 영역이 항상 사각형이다.
        - 테두리를 표현할 수도 있고, 표현하지 않을 수도 있다.

        ~ border-color: 선의 색상
        ~ border-width: 선의 두께
        ~ border-style: 선의 모양(종류)
            ~~ solid
            ~~ dashed
            ~~ dotted
        ~ border-radius: px, %: 모서리의 둥글기
            - width와 height 중 더 짧은 쪽의 길이의 절반이 최댓값이다.

    2. width, height: 개체의 너비, 개체의 높이
        - 블럭 태그에만 적용된다.
        - 컨텐츠 영역의 o, 상자의 크기x

        ~ min-weight, min-height: 최소를 지정하고 초과하면 상자도 늘어난다.
        ~ max-weight, max-height: 최대를 지정하고 초과하면 overflow
        ~ overflow: overflow 통제
            ~~ visible
            ~~ hidden
            ~~ auto

    3. padding
        - 테두리 기준 안쪽 여백

    4. margin
        - 테두리 기준 바깥쪽 여백

    * box-sizing
        - css3부터 새로 도입된 속성으로, 박스의 사이즈를 정의

        ~ content-box: 상자의 실제 크기 = 너비(높이) + 패딩 + 테두리 > 기존의 상자 크기
        ~ border-box: 상자의 실제 크기 = 너비(높이)

    + visibility, 가시성
        - 요소를 화면에 보일지 말지 결정


/* display */
    - 요소의 출력 방식 설정

    ~ none: 요소를 안 보이게 만듦.
    ~ inline: 블록 태그를 인라인 태그로 지정
    ~ block: 인라인 태그를 블록 태그로 지정
    ~ inline-block: 인라인 태그처럼 출력되면서 너비/높이를 지정할 수 있다.
    
    ~ flex: 내부 요소의 배치
        - flex box, flexible        
        - 메인축 방향: 가로(아이템이 나열되는 방향)
        - 수직축 방향: 세로
        - 아이템 크기: 너비, 메인축(요소 크기만큼) / 높이, 수직축(부모 크기만큼)    
        
        ~ justify-xxx: 메인축 방향 관련 속성
            ~~ justify-content: 메인축 방향으로 아이템 정렬
                
        ~ align-xxx: 수직축 방향 관련된 속성
            ~~ align-items : 수직축 방향으로 아이템 정렬
        
    ~ flex-direction: 메인 축 방향을 지정하는 속성
        ~~ row: 기본값
        ~~ row-reverse
        ~~ column
        ~~ column-reverse
        
    ~ flex-wrap: 자동 줄바꿈
        ~~ nowrap: 기본값
        ~~ wrap
        ~~ wrap-reverse


/* float */
    - 원래 출력되던 위치를 벗어나, 라인의 맨 왼쪽 끝 또는 맨 왼쪽 오른쪽 끝으로 이동

    ~ none
    ~ left
    ~ right

    ~ clear: float 속성을 빠져나갈 수 있다. *블럭 태그에만 적용 가능한 속성!
        > float 성질을 제거할 때는 보통 새로운 div를 생성해서 clear를 부여한다.
            ~~ <div style="clear: left;"></div>


/* CSS 초기값 */
    1. Reset CSS
    2. Normalize.css
    3. 디자인 프레임워크 or 라이브러리
        ~ Bootstrap


/* position*/

    1. padding > 부모가 자식의 위치 지정
    2. margin > 스스로 위치 지정
    3. position > 정석(CSS1~CSS3)
    4. transform > 정석(CSS3)

    - 좌표값 사용 > 위치 지정
    - x(left), y(top)
        ~ left / right > x 
        ~ top / bottom > y
    - 좌표를 지정하는 방식을 여러 개 제공

    ~ static
        - 기본값
        - 정적 좌표값
        - 워드 프로세스 방식 > FlowLayout 방식
            > 코딩 순서대로 출력되는 방식
            > 먼저 코딩하면 위에 배치, 왼쪽에 배치
            > 나중에 코딩하면 아래에 배치, 오른쪽에 배치

    ~ absolute★
        - 절대 좌표
        - 문서의 좌측 상단을 기준으로 한다.(X)
            > 자신의 직계 조상 중 가장 처음으로 만나는 태그 중 position이 static이 아닌 태그를 기준으로 한다.
        - 원래 있던 공간이 사라진다.
        ~ left, top

    ~ relative★
        - 상대 좌표값
        - 자신의 위치를 기준으로 한다.
        - 원래 있던 공간이 그대로 유지된다.
        ~ left, top

    ~ fixed☆
        - 고정 좌표
        - 브라우저 창(화면)의 좌측 상단을 기준으로 한다.
        - 스크롤에 반응하지 않고 그대로 유지된다.
        - 원래 있던 공간이 사라진다.
        ~ left, top

    ~ sticky☆
        - 고정 좌표
        - 브라우저 창(화면)의 좌측 상단을 기준으로 한다.
        - 스크롤에 반응하지 않고 그대로 유지된다.
        - 원래 있던 공간이 그대로 유지된다.
        - 화면에 보일 때는 static처럼 동작 + 사라질 때 fixed처럼 동작
        ~ left, top


/* 시맨틱 태그(HTML5) */
- <main>
    ~ <div id="main"></div>
- <header>: 머릿말 컨테이너
- <section>: 본문 컨테이너


/* list-style-type */
    - ul 태그에서 앞에 나타나는 기호를 조작할 수 있다.

    ~ none: 기호를 사라지게 한다.


/* 태그의 수평 정렬*/
    - 인라인 태그와 블럭 태그의 수평 정렬
    
    - 수평 정렬( 내용물의 정렬)
        ~ text-align

        1.인라인 태그
            - 불가능 > 여백(공백)이 없다.
        
        2. 블럭 태그
            - 가능 > 여백(공백)이 있다.            

    - 수평 정렬(태그 스스로 정렬) > 지원하는 속성 없음 > 불가능
        
        1. 인라인 태그
            - 정렬이 가능은 하지만 스스로 한 것은 아니다.
            - 부모(블럭) 태그의 text-align을 사용해서 정렬

        2. 블록 태그
            - 불가능 > 부모 영역과 자식 영억이 일치하기 때문에 좌우에 공간이 없다.
            - 가능 > 좌우 margin을 동일하게 지정(auto)


/* 웹 이미지 포맷 */
    1. gif
        - 아이콘, 그래프 등
        - 최대 256색
        - Animated GIF > 움짤

    2. jpg(jpeg)
        - 압축률 높음
        - 사진 저장
        - 16비트 색상수

    3. png
        - 압축률 높음(무손실)
        - 아이콘, 사진 등


/* 그림자, shadow */
    1. text-shadow
        ~ x y blur color
        
    2. box-shadow
        ~ x y blur color
        

/* 다단 구조 */
    ~ column-count: 단 수
    ~ column-gap: 단과 단 사이 간격
    ~ column-rule: 단과 단 사이 선
    
    ~ page-break-inside: avoid > 단이 끊겨서 다음 단으로 이어지는 것을 방지한다.
    

/* 변형, transform */    
    - 위치, 크기, 회전, 왜곡 등
    
    ~ transform: translate(): 위치 변형(이동)
    ~ transform: scale(): 크기, 배율 변형(확대/축소)
        - 단지 크기만 키우는 것이 아님! 그 안의 모든 것이 늘어나고 줄어든다.
    ~ transform: rotate(): 회전 변형
    ~ transform: skew(): 왜곡 변형(비틀기)
    ~ transform: matrix(): 위의 4개 포함. 사용자 정의형 > 행렬
    ~ transform-origin: 변형 기준점 (원점)
    
    
/* outline */
    - 상하좌우로 나타난다.
    - 다른 것들과 겹쳐져서 출력 가능하다.    
        > 테두리를 표현하고 싶은데, 주변의 영역을 침범하고 싶지 않을 떄 주로 사용!