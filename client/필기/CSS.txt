
/* CSS, Cascading Style Sheet */
    - HTML 서식을 담당하는 언어
    - 독립 실행이 안 된다. 반드시 HTML 코드가 있어야 CSS실행이 가능하다.
        > 모든 ML의 디자인을 담당하는 언어
    - CSS1, CSS2, CSS3(+HTML5)
    - HTML 서식 기능 > CSS 서식 기능(확장) + 생산성


/* HTML 문서에 CSS를 적용하는 방법*/   

    1. 인라인 스타일 시트, Inline Style Sheet
        - <태그 style="">
        - 태그에 style 속성 추가하기
        - 모든 태그는 style 속성을 가진다.
        - 서식을 태그에 직접 적용한다.
        - 특정 부분에 대한 서식 정의(잘 사용 안 함)
        - 장점: 가독성이 높다.
        - 단점: CSS 재사용이 불가능하다.

    2. 내부 스타일 시트, Embeded Style Sheet
        - <style> 태그 내에 CSS를 작성한다.
        - 문서 내의 여러 태그에 한번에 서식을 적용할 수 있다.
        - 현재 페이지에서 반복되는 서식 정의
        - 장점: CSS 재사용이 가능하다.
        - 단점: 가독성이 떨어진다.


    3. 외부 스타일 시트, External Style Sheet
        -*.css 파일에 CSS를 작성한다.
        - <link> 태그를 사용해서 참조
        - 사이트 내의 모든 페이지 공통 서식 정의
        - 장점: CSS 재사용률이 높다.(모든 문서에 적용 가능)
        - 단점: 여러 페이지의 서식을 한 곳에 작성하기 때문에 가독성이 최악이다.


/* CSS 서식 적용 */
    - 원하는 태그(들)를 찾아서 태그 자체 or 태그 내용물에 원하는 서식을 적용


/* CSS 문법 */
    - 선택자 { 
        속성명: 값; {속성명: 값} }

    1. 선택자: 문서 내에서 원하는 태그를 검색
    2. 속성: 서식의 종류
    3. 값: 서식의 값


/* CSS 선택자, CSS Selector*/
    - HTML 문서 내에서 서식을 적용하려는 대상 태그를 검색하는 도구

    1. 전체 선택자
        - 모든 태그를 선택한다. > 와일드 카드
        - 모든 태그에 동일한 서식을 적용할 때 사용
        ~ * {속성명: 값;}
    -------------------------------------------------------------------------------
    2. 태그 선택자
        - 태그명을 가지고 원하는 태그를 선택한다.
        - 검색된 모든 태그에 일괄 적용한다. > 생산성이 높다.
            > 단점이 되기도 함.
        - 사용이 쉽다.
        ~ 태그명 {속성명: 값;}

    3. ID 선택자
        - 태그에 명시된 id 속성을 검색해서 태그를 선택한다.
        - 원하는 태그를 직접 선택할 수 있다.
        - 일괄 적용이 안 된다.
        ~ 태그명#ID명 {속성명: 값;}
        ~ #ID명 {속성명: 값;} > 태그명은 생략 가능(자동으로 *이 붙은 것으로 인식)

    4. Class 선택자
        - 태그에 명시된 class 속성을 검새해서 태그를 선택
        - class는 그룹을 묶기 위한 식별자이다. > 일괄 적용이 된다.
        ~ 태그명.클래스명 {속성명: 값;}
        ~ .클래스명 {속성명: 값;} > 태그명 생략 가능(자동으로 *이 붙은 것으로 인식)
            ※ 클래스명은 여러 개에 동일하게 사용될 수 있기 때문에 생략할 떄 주의!
    -------------------------------------------------------------------------------
    5. 나머지 선택자
        - 태그 선택자, ID 선택자, Class 선택자를 조합해서 만든다.

        a. 그룹 선택자
            - 2개 이상의 선택자를 한번에 적용하는 방법
            ~ 선택자, 선택자 , 선택자... { 구현부; }

        b. 자식 선택자, Child Selector
            - 부모를 조건으로 자식을 선택한다.
            - 구체적
            - 정밀도 높음 + 범위 좁음
            ~ 선택자 > 선택자 {구현부;}

        c. 자손 선택자, Descendant Selector
            - 조상을 조건으로 자식을 선택한다.
            - 정밀도 낮음. 범위 넓음
            ~ 선택자 선택자 {구현부;}

        d. 인접 형제 선택자, Adjacent Sibling Selector
            - 정밀도 높음 + 범위 좁음 > 바로 위에 있는 형만
            - 자식 선택자 느낌
            ~ 선택자 + 선택자 {구현부;} 

        e. 형제 선택자, Sibling Selector
            - 정밀도 낮음 + 범위 넓음 > 위에 있는 형이기만 하면 ok
            - 자손 선택자 느낌
            ~ 선택자 ~ 선택자 {구현부;}

        f. 의사 클래스, Pseudo Class
            - 실제 태그에 class 속성에 명시되어 있지 않은데 선택자에서는 진짜 존재하는 클래스처럼 사용하는 클래스
            - 원래는 <a> 태그만 지원 > 모든 태그 확장 + 종류 증가
                ~ a:link {구현부;} : 브라우저가 한번도 방문하지 않은 상태
                ~ a:visited {구현부;} : 브라우저가 방문했던 상태
                ~ a:active {구현부;} : 활성화 상태
                ~ a:hover {구현부;} : 마우스 커서가 올라가 있는 상태


/* 충돌 */
    - 선택자 충돌
    - 동일한 태그를 서로 다른 선택자가 동시에 선택했을 때
    
    - 선택자 우선순위
        - 충돌이 발생하면 우선순위가 가장 높은 선택자가 적용된다.

        - 점수 계산
            1. 태그 선택자      > 1점   > "사람"
            ---------------------------------------------
            2. 클래스 선택자    > 10점  > "남자"
            ---------------------------------------------
            3. ID 선택자        > 100점 > "홍길동'

        - 태그 선택자 1000개가 모여도 클래스 선택자 1개를 이길 수 없다.


/* Emmet, Zen-Coding */
    - CSS 선택자 문법을 사용해서 HTML/CSS 코드를 손쉽게 작성하는 기능
    - 생산성 도구
    - https://emmet.io/

    