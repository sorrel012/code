
// JavaScript
    - 브라우저에서 동작하는 프로그래밍 언어
    - Netscape > Navigator
    - 가볍다 + 쉽다 = 기능 적음 > 어렵다.
    - C 계열 언어 > 기본 구문이 자바와 유사
    - Java <- (무관계) -> JavaScript
    - LiveScript -> JavaScript
    - 초반 > 폼태그 유효성 검사 + 링크 조작 + 이미지 조작 등 > BOM
      중반~2013() > 모든 태그 조작 > DOM
      후반(2014~) > ECMA2015(ES6) > Node.js 출시(구글 크롬 V8 엔진) 
                  > 비브라우저 환경에서 JavaScript 동작 > 서버 구축 or 그 이외 개발
                  

// JavaScript 역사
    1. Netxcape navigator > JavaScript1.0 > 1.1 > ... > 1.8
    2. Internet Explorer > JavaScript > JScript 1.0 > 2.0 > ... > 8.0
    3. ECMA > JavaScript > ECMAScript(ES) > ... > ECMAScript 2015(ES6) > ECMAScript 2020(ES11)
        - 현재 자바스크립트(ES6 기반)
    
        
// JavaScript가 하는 일
    1. 기본적인 프로그래밍 언어로서의 행동
        - 변수
        - 연산자
        - 제어문
        - 데이터 조작, 가공 등
        
    2. 브라우저에서만 할 수 있는 행동 > BOM, DOM
        - HTML/CSS 조작
        a. HTML Element 생성
        b. HTML Element 수정
        c. HTML Element 삭제
        d. HTML Attribute 생정/수정/삭제
        e. HTML PCDATA 생성/수정/삭제
        f. CSS 속성 색성/수정/삭제
        g. 폼태그 조작
        h. 이미지 조작
        i. 링크 조작
        j 기타 객체 조작
    
    3. 서버 제작, 응용 프로그램 제작
        - Node.js
        
    4. 확장 라이브러리
        - jQuery
        
    5. JavaScript Framework
        - Angular
        - React
        - Vue.js


// HTML 문서에 JavaScript를 적용하는 방법

    1. 인라인 방식(X) > 이벤트 핸들러(Event Handler) == 이벤트
        - 태그에 직접 기재
        - 대부분의 태그에 onXXX 속성 제공
        
    2. 임베디드 방식
        - <script> 태그 내에 기재
        
    3. 외부 방식
        - *.js > 독립된 파일에 기재
        ~ <script src="URL">
        

// 구문의 실행 순서
    - 위 > 아래
    - 문장 단위
    - 연산자 우선순위
    
    - ★★★HTML과 JavaScript구문이 동시에 실행된다.
    
    
// 디버깅
    - 값 확인
    
    1. alert(값);
    2. console.log(new Date()); > 표준
    3. window.document.all > 사용 금지


// 자료형    
    
    1. number
        - 숫자형(정수, 실수)
    
    2. string
        - 문자, 문자열
    
    3. boolean
        - 논리형
        
    4. object 
        - 객체형
        - JavaScript에는 클래스가 없지만 객체는 있다.
        - 자바스크립트 > 객체 기반 프로그래밍 언어 (≠ 자바 > 객체 지향 프로그래밍 언어)
        
    5. 기타(=상수)
        a. null
        b. undefined
        c. NaN(Not a Number) 


// 형변환
    - 함수 제공
        1. number parseInt(value)
        2. number parseFloat(value)            
        

// 변수, 상수(리터럴)
    - JavaScript는 변수의 타입이 없다.
    - var 변수명;
    - 변수는 모든 자료형의 데이터를 저장할 수 있다.(= 자바 Object 변수)
    - 자바스크립트는 초기화가 되지 않은 변수의 상태를 null이라고 하지 않고, undefined라고 한다.
    
    - 변수 영역
        1. 전역 변수 > HTML 페이지 전역 > 선언문 실행(생성) ~ 페이지 종료(소멸)
        2. 지역 변수 > 블럭 영역 변수 X, 함수 영역 변수(O) > 함수만 지역으로 인식 > 제어문 인식 X
    
    

// 연산자, 제어문, 문자 이스케이스
    - 자바와 동일    
    
    ※ == vs ===
        - ==  : 동등 비교 연산자. 자료형의 비교(X), 값만 비교(O) <-> !=
        - === : 동등 비교 연산자/ 자료형의 비교(O), 값만 비교(O) > 우리가 아는 동등 비교 연산자 <-> !==
    

// 함수      
    function m1(num)  {
        return 10;
    }    


// Date
    - 내장 객체
    ~ var 변수명 = new Date();
    
    - 요소 출력
        ~ getYear: 두 자리 연도
        ~ getFullYear: 네 자리 연도
        ~ getMonth: 월-1        
        ~ getDate: 일
        ~ getDay: 요일(숫자, 일요일이 0부터 시작)
        ~ getHours: 시
        ~ getMinutes: 분
        ~ getSeconds: 초
        ~ getMilliseconds: 밀리초
        ~ getTime: 틱(ms)
        
    - 출력
        ~ toLocaleString: 날짜 + 시간
        ~ toLocaleDateString: 날짜만
        ~ toLocaleTimeString: 시간만
        
    - 특정시각 만들기
        ~ setFullYear(4자리 연도): 연도 설정
        ~ setMonth(월-1): 월 설정
        ~ setDate: 날짜 설정        
        
    - 연산
        1. 시각 - 시각
            ~ 시각변수 - 시각변수: 틱값 반환
            ~ (시각변수 - 시각변수)/1000/60/60/24: 일수로 표현
            
        2. 시각 + 시간 / 시각 - 시간
            ~ setTime(getTime() + (원하는 일수 * 24 * 60 * 60 * 1000))        
        
        
// 배열
    - Array(외형) + ArrayList(길이 가변, 자료형 자유)    
    ~ var 배열명 = new Array();
    
    - 초기화 
        1. var 배열명 = new Array(값);
        2. var 배열명 = [값] > 배열 리터럴 표현 > 더 많이 씀
    
    - 스택처럼 활용 가능
        ~ push, pop


// 이벤트, Event
    - 사건
    - 객체(혹은 태그)에서 발생하는 사건
    - 언제 발생할지 예측 불가능(시간)
    

// JavaScript Event Handling★★
    - 이벤트 등록(구현)
    - 사건 처리
    - 언제 발생할지 예측 불가능한 사건에 대해 처리를 하고 싶다. > 언젠가 사건이 발생하면 처리하기 위한 코드를 미리 준비한다. > 사건과 연결 > 이벤트 처리, 이벤트 매핑, 이벤트 구현 등
    
    1. 정적
        - HTML 코드에 직접 사용
    
    2. 동적
        - JavaScript 코드를 사용    


// 마우스 관련 이벤트
    - onmouseXXX
    
    1. onmouseover(= onmouseenter)
        - 해당 객체의 영역에 마우스(커서)가 진입하는 순간 발생
    2. onmouseout(= onmouseleave)
        - 해당 객체의 영역에서 마우스(커서)가 빠져나가는 순간 발생
    3. onmousedown
        - 해당 객체의 영역에서 마우스 버튼을 누르는 순간 발생
    4. onmouseup
        - 해당 객체의 영역에서 마우스 버튼을 떼는 순간 발생
    5. onmousemove
        - 해당 객체의 영역에서 마우스가 움직일 때마다 발생

    ~ event.buttons: 마우스 버튼의 번호
        - 왼쪽(1), 오른쪽(2), 왼쪽+오른쪽(3), 휠버튼(4)
    
    ~ 마우스 커서 좌표    
        1. x, y
            - 문서 좌측 상단을 기준으로 한다.
            - 비표준(MS-IE) > 비권장
            
        2. clientX, clientY★★★★★
            - 문서 좌측 상단을 기준으로 한다.
            - 표준 > 권장
            ≒ CSS > position: absolute;
            
        3. screenX, screenY
            - 모니터 좌측 상단을 기준
            - 일상적으로는 다루기가 힘들다.
        
        4. offsetX, offsetY★★★★★
            - 이벤트 객체의 좌측 상단을 기준
            - 자기 자신이 기준이 된다.
            ≒ CSS > position: relative;

        
// 태그 조작
    - CSS: 선택자 > 태그 검색 > 접근 > 서식 조작
    - JavaScript: 검색 도구 > 태그 검색 > 접근 > 태그 조작
        - HTML 계층 구조를 활용하여 탐색
        1. BOM        
        2. DOM


// BOM, Browser Object Model > 비오엠
    - 초창기 모델
    - 현재까지 계속 사용
    - 선택적 모델 > 일부 태그만 관리 > 일부 태그만 조작 가능 > 빠진 태그는 조작 불가능
    - 이미지, 링크, 폼 태그 이외에는 조작이 불필요하다고 판단        
    - 태그의 name을 사용해서 접근한다.
    - id, class는 인식하지 못 한다.
    
    - 예약어
        ~ window: 창
            ~~ window.close(): 창을 닫아준다.
        ~ document: 문서 객체
    
    
// DOM, Document Object Model > 돔
    - BOM을 개선한 모델
    - 현재까지 계속 사용(주력)
    - BOM 기반 + 기능 추가
    - 모든 태그를 인식 > 모든 태그 조작 가능
    - name, id, class 모두 인식할 수 있다.
