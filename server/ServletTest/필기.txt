
// 지금까지 정리
    - HTML, CSS, JavaScript > 정적 HTML 페이지
    - 자바 > 위의 페이지 생산 > 동적 HTML 페이지

// Servlet, 서블릿
    - 웹서버 측에서 자바를 사용한 프로그램을 동작시키는 기술(환경)
    - 목적: 클라이언트 요청에 따라 동적으로 웹페이지 생성
    
    
// Servlet Class, 서블릿 클래스
    - 자바 클래스
    - 서블릿(역할 부여)
    
    - 작성 규칙
        1. 서블릿 클래스 선언
            a.  javax.servlet.Servlet 인터페이스를 구현한다.  > 복잡함
                javax.servlet.http.HttpServlet 클래스를 상속 받는다.(위의 인터페이스를 상속받은 클래스) > 간편함 > 주로 사용★★★
                
        2. doGet/doPost 메소드 선언
            - 둘 중 하나 선언 or 둘다 선언
            - 클라이언트(브라우저)의 요청이 들어오면 자동으로 호출되는 메소드
            - 동적으로 HTML 페이지를 만드는 역할
            
            1) doGet - <form method="GET">
            2) doPost - <form method="POST">
            
            - 메소드 작성 규칙
                a. 매개 변수 작성(2개)
                    1. java.servlet.http.HttpServletRequest
                    2. java.servlet.http.HttpServletResponse
                b. 예외 미루기
                    1. java.io.IOException //페이지 동적 생성 - 외부 입출력
                    2. java.servlet.ServletException //서블릿 작업
                    
        3. 동적 HTML 문서 작성
            - HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 객체 반환
            - PrintWriter 객체의 printXXX("<html>") 메소드를 사용 > HTML을 생성
                ※ BufferedWriter > 생성된 파일을 하드디스크에 저장
                   PrintWriter > 생성된 파일을 톰팻을 통해 브라우저에게 반환
            - 페이지 완성 > 브라우저에게 반환
            
        4. 브라우저가 자바 파일(서블릿)을 호출할 수 있는 가상 주소 매핑
            - web.xml
            
            
// 자바 파일 웹 호출
    - 자바 파일(class)은 웹(http://)에서 호출이 불가능하다.
    - 자바 파일을 브라우저를 통해 웹에서 호출할 수 있는 방법이 필요하다.
        > 가상 주소 생성 > 대신 자바 파일을 호출하게 설정!!        
            web.xml == Deployment Descriptor == 배포 서술자
                - 아파치 톰캣이 웹 사이트 운영에 필요한 여러 가지를 설정하는 파일
                
                
// 데이터 전송&수신
    1. 전송: Ex04.java
    2. 수신: Ex04Ok.java   
    
    
// POST 요청
    1. <form method="POST">
    2. XMLHttpRequest(Ajax)
  
  
// GET 요청
    1. <form method="GET">
    2. XMLHttpRequest(Ajax)  
    3. <a href="">
    4. location.href
    5. F5(새로고침)
    6. URL 직접 입력


----------------------------------------------------------------------------------------------------
    
// JSP, Java Server Pages
    - 자바를 사용해서 서버 측에서 페이지를 만드는 기술
    - Servlet의 다음 버전
    
    
// 서블릿 vs JSP
    1. 서블릿
        a. 장점: 자바 기반. 자바 구문을 사용할 수 있다. > 자바 클래스 사용
        b. 단점: 자바 기반. 클라이언트 코드 작성이 불편하다. > 문자열 취급
                                                   > 가상 주소 매핑 필요
                                                   
    2. JSP(=웹페이지처럼 보이는 서블릿)
        a. 장점: HTML 문서 기반. 클라이언트 코드 작성이 쉽다. > 구문 인식
                                                     > 가상 주소 매핑 불필요
        b. 단점: HTML 문서 기반. 자바 구문 작성이 불편하다.
        
    3. 서블릿 + JSP > Strping
        a. 서블릿: 자바 코드 담당
        b. JSP: 클라이언트 코드 담당


// JSP 구성 요소
    1. JSP 지시자, JSP Directive
        - 톰캣에게 JSP 페이지와 관련된 여러 가지 상황을 알려주는 역할 > 환경설정
        - <%@ %>
        
        a. page 지시자
            - JSP 페이지 관련 설정            
             
            - <%@page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>      
                ~ language="java" : 현재 페이지를 처리하는 서버측 언어가 java임을 안내
                ~ contentType="text/html; charset=UTF-8" : 브라우저에게 돌려줄 임시페이지에 관련된 설정
                ~ pageEncoding="UTF-8" : 현재 JSP 페이지의 인코딩
                
            - <%@page import="java.util.Calendar"%> : 자바의 import
            
            - errorPage="URL" : 오류가 발생하면 자동으로 URL로 이동. 오류 페이지
              
        b. include 지시자
        c. taglib 지시자
        
    2. 스크립트 요소, Scripting Elements
        - 스크립틀릿
        - 익스프레션
        - 선언부
        
    3. 액션 태그, Action Tags
        - 기본 액션 태그
        - 확장 액션 태그
        - 사용자 정의 액션 태그


// HTML 페이지 만들기

    1. SSR(Server Side Rendering)   
        - HTML 페이지를 서버측에서 만든다.
        - 전통적 방식
    
    2. CSR(Client Side Rendering) + REST API(Restful API) + MSA
        - HTML 페이지를 JavaScript로 만든다.
        - 필요한 데이터만 서버랑 송수신을 통해 얻는다.
        - Ajax, JavaScript Framework(Angular, React 등)
        
        
    