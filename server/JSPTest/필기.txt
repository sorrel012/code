
// JSP, Java Server Pages
    - 자바를 사용해서 서버 측에서 페이지를 만드는 기술
    - Servlet의 다음 버전
    - <%-- 주석 --%>
    
    
// 서블릿 vs JSP
    1. 서블릿
        a. 장점: 자바 기반. 자바 구문을 사용할 수 있다. > 자바 클래스 사용
        b. 단점: 자바 작성 용이, 클라이언트 코드 작성이 불편. > 문자열 취급
                                                 > 가상 주소 매핑 필요
                                                   
    2. JSP(=웹페이지처럼 보이는 서블릿)
        a. 장점: HTML 문서 기반. 클라이언트 코드 작성이 쉽다. > 구문 인식
                                                  > 가상 주소 매핑 불필요
        b. 단점: 웹 작성 용이, 자바 작성 불편
        
    3. 서블릿 + JSP > Strping
        a. 서블릿: 자바 코드 담당
        b. JSP: 클라이언트 코드 담당


// JSP 구성 요소
    1. JSP 지시자, JSP Directive
        - 톰캣에게 JSP 페이지와 관련된 여러 가지 상황을 알려주는 역할 > 환경설정
        - <%@ %>
        
        a. page 지시자
            - JSP 페이지 관련 설정            
             
            - <%@page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>      
                ~ language="java" : 현재 페이지를 처리하는 서버측 언어가 java임을 안내
                ~ contentType="text/html; charset=UTF-8" : 브라우저에게 돌려줄 임시페이지에 관련된 설정
                ~ pageEncoding="UTF-8" : 현재 JSP 페이지의 인코딩
                
            - <%@page import="java.util.Calendar"%> : 자바의 import
            
            ~ errorPage="URL" : 오류가 발생하면 자동으로 URL로 이동. 오류 페이지
              
        b. include 지시자
            - <% include file="URL" %>
            - 다른 JSP/HTML 페이지를 또다른 JSP 페이지의 일부 영역에 삽입하는 기술
            - 조각 페이지: 다른 온전한 페이지의 일부분으로 사용 > 내용 조심!
            
        c. taglib 지시자
        
    2. 스크립트 요소, Scripting Elements
        a. 스크립틀릿
            ~ <% %>
            - 이 영역은 자바 영역임을 선언
            - 순수 자바 코드를 HTML 페이지에서 작성할 수 있도록 선언
            - Scriptlet = Script + Applet
            - 대부분의 비즈니스 코드 작성 담당(대부분의 업무 + 알고리즘 구현)
            - 가장 중요한 역할
            - 보통 페이지 지시자 밑에 작성한다.(코드 관리 용이)
                
        b. 익스프레션
            ~ <%= 값 %>
            - 자바의 값을 HTML 문서에 츨력한다. 
            - 값이 아무것도 들어있지 않으면 에러가 발생한다.  
        
        c. 선언부
            ~ <%! %>
        
    3. 액션 태그, Action Tags
        - 기본 액션 태그
        - 확장 액션 태그
        - 사용자 정의 액션 태그


// HTML 페이지 만들기

    1. SSR(Server Side Rendering)   
        - HTML 페이지를 서버측에서 만든다.
        - 전통적 방식
    
    2. CSR(Client Side Rendering) + REST API(Restful API) + MSA
        - HTML 페이지를 JavaScript로 만든다.
        - 필요한 데이터만 서버랑 송수신을 통해 얻는다.
        - Ajax, JavaScript Framework(Angular, React 등)
        
        
 // JSP(Servlet) 내장 객체, JSP Implicit Object
    - 개발자가 직접 생성하는 객체가 아니라, JSP(톰캣)가 미리 만들어서 제공하는 객체
    - 예약어 형태로 제공
    ~ request, response, session, pageContext  ★★★★4가지 매우 중요★★★★
    ~ out, application
    ~ config, page, exception 등
 
    
    ~ pageContext, request, session, application 
        - 객체 내부에 사용자(개발자) 데이터를 관리하는 저장소(컬렉션)를 가진다.★★★★
        - 내장객체.setAttribute(key, value)
        - 내장객체.getAttribute(key) 
       
        
    1. request 
        - 클라이언트 -> (행동) -> 서버
        a. 전송된 데이터 가져오기
        b. 전송된 데이터 인코딩
        c. 요청에 관련된 정보 가져오기
      
        
        ~ request.getParameter 행동
            - 모든 폼 컨트롤의 데이터를 받는다.
            - name이 1개일 때 사용한다.
            - 컨트롤은 존재하는데 값을 입력하지 않으면 "" 반환
            - 컨트롤이 존재하지 않으면 null 반환
        
        ~ request.getParameterValues
            - name이 동일한 컨트롤이 2개 이상 전송될 때 사용한다.
        
    2. response
        - 서버 -> (행동) -> 클라이언트
        a. 돌려줄 임시 페이지 제작 > response.getWriter() > PrintWriter()
        b. 돌려줄 임시 페이지 인코딩 > response.setCharacterEncoding("UTF-8")
        c. 돌려줄 내용의 MIME 지정 > 파일 업로드
        d. 페이지 이동하기
            ~ response.sendRedirect()    
    
    3. pageContext
        - 페이지 실행(요청~응답)중에 관련된 데이터를 저장하는 객체
        a. 페이지 이동하기
        
        ~ pageContext.forward(): 데이터를 넘기면서 이동할 때 주로 사용 > 주소 바뀌지 않음
            <-> 일반적으로는 response.sendRedirect() 사용   > 주소 바뀜
    
    4. out
        - 응답 페이지 출력 스트림 객체
        - 서블릿 PrintWriter와 같은 역할
        
        ~ out.close(): 렌더링을 중단하고, 출력 버퍼 안의 내용을 클라이언트에게 반환한다.
        
        
    5. session
        - 세션에 저장한 변수
            > 전역 변수(페이지 간에 별도의 전달 과정 없이 언제든 입출력 가능)
            > 접속 종료 전까지 계속 유지가 된다.(상태 유지 도구 역할)
        
        - 같은 프로그램이면 같은 사용자, 다른 프로그램이면 다른 사용자로 인식한다.
    
    
    6. application
        - 전역 변수
        
        
    ※ pageContext, request, session, application 생명 주기
        
        - pageContext < request < session < application
        
        - A 페이지(데이터 저장) > B 페이지(데이터 접근)
  
        
// JSP 실제 처리 프로세스
    
    1. Cookie
        - 개인 정보를 저장하는 저장소
        - 브라우저가 관리하는 저장소
        - 방문자가 사이트에 접속 > 사이트에 접속한 브라우저(개개인)의 정보를 관리하기 위해서 쿠키에 정보를 입출력
        
        - JSP(Servlet), JavaScript 등 > 쿠키에 접근해서 조작 가능 
        
        - 쿠키의 종류
            1. 메모리 쿠키
                - 브라우저 실행 중에만 유지
                - 브라우저가 종료되면 쿠키도 삭제
                - 메모리에만 상주
            
            2. 하드 쿠키
                - 브라우저가 종료돼도 유지
                - 하드 디스크에 저장
    
 
 * 회원정보 관리 작업 *

- 주제
    > 주소록
    > CRUD
    
1. 업무 > 생략
2. DB 작업 > ERD (X) > 테이블 생성
3. 클라이언트 작업 > 레이아웃 + 페이지 구현 > HTML, CSS, JavaScript 
    - webapp > "address" 폴더 생성
                > "list.jsp"        목록 보기
                > "add.jsp"         추가하기(폼)
                > "addok.jsp"       추가하기(처리)
                > "edit.jsp"        수정하기(폼)
                > "editok.jsp"      수정하기(처리)
                > "del.jsp"         삭제하기(폼)
                > "delok.jsp"       삭제하기(처리)
                > "template.jsp"    임시페이지
                
    - webapp > address > "inc" 폴더 생성
                            > "header.jsp"
                            > "asset.jsp"
                            
    - webapp > address > "asset" 폴더 생성
                            > "main.css"
 
 ※ 폼 컨트롤의 name을 데이터베이스 테이블의 컬럼 이름과 똑같이 주는 것이 좋다!!
 
 
 //웹 보안
    - 로그인, 로그아웃
    - 세션(쿠키) 기반의 인증
    - 현재 접속자가 해당 사이트의 구성원인지 확인하고, 특정 행동에 대한 허가를 하는 작업
    
    1. 인증, Authentication
        - 현재 접속자가 해당 사이트의 구성원인지 확인
        - 회원인지 아닌지 확인
        - 로그인
    
    2. 허가, Authorization
        - 특정 행동에 대한 허가를 하는 작업
        

* 웹 보안 작업 *        

    - webapp > "auth" 폴더 생성
                > "index.jsp"       시작페이지(초기화면)
                > "login.jsp"       로그인 폼 페이지
                > "loginok.jsp"     로그인 처리 페이지 > 실제 인증 작업 수행
                > "logout.jsp"      로그아웃 페이지
                -------------------------인증----------------------------
                
                > "member.jsp"      회원 전용 페이지 
                > "admin.jsp"       관리자 전용 페이지
                
                -------------------------허가----------------------------
                
 
// MVC 디자인 패턴
	- Model			> 데이터(데이터 관련 업무-자바) 담당
	- View			> 출력 업무 담당(HTML 코드-JSP)
	- Controller	> 입력과 제어 담당(자바 코드) > 전체 업무 통제 역할
	 

// JSP Model

	1. JSP Model 1
		- HTML + CSS +JavaScript + Java + Servlet + JSP = *.jsp              
		- <% java code %> + client code
		- 코드가 뒤엉켜서 불편
		
	2. JSP Model 2 
		 - Servlet: 자바 코드 작성
		 - JSP: 클라이언트 코드 작성                    
		 - 디자인 패턴: MVC 패턴 기반 구현       
		
                    
                    