
// 프로그램
    1. Git
	- https://git-scm.com
	    > 64-bit Git for Windows Setup.

    2. SourceTree
	- https://www.sourcetreeapp.com


// Windows 자격 증명 관리
    - 일반 자격 증명
	- git: XXX
	- sourcetree
	- bitbucket


// 버전 관리
    - 레포트
    - 게임 > 세이브
    - 클라우드 서비스
        - 구글 드라이브 > 버전 관리 지원
        - 원드라이브


// 버전 관리 시스템(프로그램)
    1. CVS(Concurrent Versions System)
    2. SVN(SubVersion)
    3. Git
        - Git 호스팅 업체(Git 원격 제공 서비스)
            a. GitHub(MS)
            b. GitLab
            c. BitBucket


// Git 사용
    1. 개인 작업
    2. 협업


// Git 설치
    - Git 확인
        1. Git Bash : CLI
            - ~ : 사용자 홈디렉토리
            - $ pwd : 현재 위치 확인
            - $ git --version : 깃 버전 확인
            - $ clear : 화면 지워줌
        2. Git CMD : CLI
        3. Git GUI : 잘 안 쓰고 Source Tree를 많이 씀


//Git GUI
    1. SourceTree
    2. TortoiseGit
    3. GitHub Desktop


// 사용자 등록
    - $ git config --global user.email '이메일 주소'
    - $ git config --global user.name 'name'


// 로컬 저장소 만들기 + 스테이징 + 커밋
    - Git 프로그램에 의해서 버전 관리를 받을 수 있는 대상 폴더
        1. 폴더 이동

        2. $ git init 
            - Initialized empty Git

        3. 파일 생성

        4. $ git status
	- 현재 워크 트리의 상태를 확인

        5. $. git add <파일명>

        6. $ git commit -m '메시지'

        7. $ git log ($git log --oneline)
	- 커밋 내역 보기(커밋 내역 간단하게 보기)

        8. $ git checkout <commit hash>($ git checkout -)    > 통제 난이도가 있음.. 권장은 x
            - 커밋 이동하기(가장 최근 커밋으로 복귀)
	- 커밋들을 자유롭게 이동

        9. $ git reset <commit hash>	> 권장
	- 이전 커밋으로 돌아가면 이후 커밋이 전부 소멸된다.
	a. 기본(mixed)
	    - 돌아간 커밋 이후의 모든 커밋을 unstaged 상태로 되돌린다.
	b. soft
	    - 돌아간 커밋 이후의 모든 커밋을 staged 상태로 되돌린다.
	c. hard
	    - 돌아간 커밋 이후의 모든 커밋에 포함되어 있는 작업 내용을 삭제한다. > 가장 깔끔

        10. $ git revert <commit hash>	> 더욱 권장
	- 이전 커밋으로 돌아가도 이력이 계속 유지
    

// Git 기본 브랜치명 변경
    - master > main
    - $ git config --global init.defaultBranch main


// Git 명령어
    1. --global 생략 > 현재 로컬 저장소에만 적용
    2. --global 명시 > 컴퓨터의 모든 저장소에서 적용


// Working tree, Working directory, 작업 폴더
    - 저장소를 보유하는 폴더
    - 사용자가 작업을 하는 폴더


// main
    - 브랜치(Branch) 가지
    - 커밋들의 시간적 흐름 표현
    - 가장 중심이 되는 브랜치


// HEAD
    - 최신 커밋을 가리키는 화살표
    - 현재 작업 중인 커밋을 가리키는 화살표
    - 보통 현재 작업 중인 커밋 == 최신 커밋


// 원격 저장소에 커밋 올리기
    1. 원격 저장소 등록
        - git remote -v
        - git remote add 별칭 원격저장소URL

    2. 로컬 저장소의 커밋들 > 원격 저장소
        - git push <별칭> <브랜치명>


// 원격 저장소의 커밋을 로컬 저장소에 내려 받기
    1. 원하는 위치로 변경

    2. clone
        - git clone <원격저장소URL> .
        - 원격 저장소의 커밋이나 설정, 커밋 이력 등을 모두 가져온다.

    3. git pull origin main


============================================================

● 협업

// 작업 > main 브랜치 > 커밋(이력)
    - main 브랜치에는 커밋을 안 한다. (처음 공통 작업)

    - 한 사람 > 새로운 기능 > 별도 브랜치 생성


// 브랜치 병합하기
    - 업무 구현 완료 > 자기 브랜치에 main 우선 병합 > 문제 발생? > 다시 main에 자기 브랜치를 병합 > main에 추가한 기능을 반영





ex)
1.  center

2. 새로운 기능 추가 > 게시판

3.. 브랜치 만들기
    - feature/board

4. board.txt 파일 만들기

5. 커밋 > 5. 게시판 기능 추가 



6. home

7. 새로운 기능 추가 > 장바구니

8. 브랜치 만들기 > feature/cart

9. cart.txt 파일 만들기

10. 커밋 > 6. 장바구니 기능 추가


11. board(주) <- main(부) 후 main(주) <- board(부)



-------------------------------

1. center
2. 새 브랜치 만들기 > feature/auth
3. auth.txt 파일 생성
4. 팀 명단 변경하기 > plan.txt
5. commit 8. 인증 기능 추가, 팀 명단 수정
6. push


1. home
2. 새 브랜치 만들기 > feature/map
3. map.txt 추가
4. 팀 명단 변경하기 > plan.txt 수정
5. 커밋 > 9. 지도 기능 추가, 팀 명단 수정
6. push


=============병합====================

1. center > auth

2. home > map

------------------------------------

병합 충돌 > 발생이 잘 되지 않고, 되면 안 됨!
- 서로 다른 브랜치(다른 사람) 에서 같은 파일을 조작

=========================================================================


1. 원격 저장소 만들기
    - 실력이 가장 좋은 팀원이 메인으로~~
    - 수정 권한 부여
        * Settings > Collaborators > Addpeople

2. 클론 > 로컬에 받아오기

3. 공통작업

4. 공통작업 후 원격저장소에 push
    - .gitignore 작성
    - .gitignore 파일은 반드시 저장소의 최상위에 위치해야 한다.(.git 폴더와 같은 위치에 있어야 한다.)
    - 올리고 싶지 않은 파일명을 적어주면 된다. 
        ex) 필기.txt 
    - 올리고 싶지 않은 폴더는 뒤에 / 를 붙여준다.
        ex) build/

	
    *gitignore.io 사이트에서 알아서 만들어준다.*
	+ eclipse 부분에 .classpath, .project

4. 1/n
    - 1 > 게시판
    - 2 > 회원가입
    - 3 > 관리자

    ****************** 자신의 브랜치 생성




--------------------

fork

- 다른 사람의 원격 저장소를 내 원격 저장소로 복사


------------------------

프로젝트

[기술 고문]
1. 원격 저장소 생성
2. Clone > 로컬 저장소 생성
3. 2번 위치 > 이클립스 프로젝트 생성
4. 공통 작업 > 베이스 코드 작성

[다른 팀원]
1. 저장소 URL 복사
2. Clone > 로컬 저장소 생성
3. 2번 위치 > 이클립스 프로젝트 Import
4. 기능 브랜치 생성
5. 개인 작업~~~~~~
6. 개인 > Pull Request
7. 기술 고문 > 병합

------------------------
오류

로컬 저장소 + 프로젝트 폴더 삭제 > 다시 Clone

*** reset, revert > 되도록 사용하지 마세요













