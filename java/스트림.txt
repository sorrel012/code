//스트림, Stream
	- Java 8
	- ★★★배열(컬렉션)의 탐색(조작)
	- 파일 입출력
	- 디렉토리 탐색
	- 빈번하게 익명 객체를 사용 > 람다식 사용 + 표준 API 함수 인터페이스 이용
	
	~ Stream<T>: 범용 스트림
	~ IntStream: 전용 스트림
	
	- 파이프 : 스트림 객체 메소드
		1. 중간 파이프
			- 스트림 반환
			
			~ filter() : 필터링
				- 앞의 스트림 값들을 받아서 검사 후 조건을 만족하는 요소만 스트림으로 반환
				
			~ distict() : 중복 제거
				- 앞의 스트림 값들을 받아서 중복값을 제거한 새로운 스트림 반환
				- 유일한 값들로만 되어 있는 스트림을 생성
				- Set 성질과 유사
				
			~ map() : 변환(매핑)
				- 앞의 스트림 값들을 받아서 다른 값으로 변환한 새로운 스트림 반환
				
			~ sorted() : 정렬
				- 앞의 스트림 값들을 받아서 정렬된 상태의 스트림 반환
				- ※여러 개의 sorted()를 나열해도 n차 정렬이 되는 것이 아니라 최종 sorted()대로만 정렬된다.
		
		2. 최종 파이프	
			- 스트림이 아닌 것을 반환 || 반환값 X
		
			~ ★★★forEach() : 탐색
				1. stream 	> 배열(컬렉션)으로부터 데이터 집합을 공급받는다.
				2. forEach 	> 공급받은 데이터를 하나씩 꺼내서 Consumer에 전달한다.
				3. Consumer > forEach가 하나씩 꺼내 온 데이터를 전달 받아 처리한다.
		
			~ allMatch(), anyMatch(), noneMatch() : 매칭
				a. boolean allMatch(Predicate): 모든 요소가 만족하는지?(&&)
				b. boolean anyMatch(Predicate): 일부 요소가 만족하는지?(||)
				c. boolean nonMatch(Predicate): 모든 요소가 불만족하는지?(^)
				
			~ count(), max(), min(), sum(), average() : 집계
				- 앞의 스트림 값들을 받아서 개수, 최댓값, 최솟값, 총합, 평균값 반환
				~ count(), max(), min() : 모든 타입 지원	> Stream
				~ sum(), average() : 숫자 타입 지원 		> IntStream, DoubleStream > map을 사용하여 변환해주어야 함
				
				※ Optional<T>
					- 값형 자료형을 취급하지만 null을 가질 수 있다.
					- 참조변수명.get()을 사용하여 숫자만 얻을 수 있다.
			
			
//스트림을 얻어오는 방법
	- stream()/OOO/OOO 메소드를 사용한다.	
		1. 컬렉션으로부터 > List 계열, Set 계열
		2. 배열로부터
		----------------------------------
		3. 숫자 범위로부터
		4. 파일로부터
		5. 디렉토리로부터
		
//메소드 체인
	- 메소드의 반환값에 바로 또다른 메소드를 연결시킨 모습
	- 함수형 프로그래밍 방식
	~ Data.getDoubleList(10).stream().forEach(System.out::println);
	
