//람다식, Lambda Expression
	-함수형 프로그래밍 방식을 지원하는 표현식
	- 람다식을 사용하면 코드 일부가 간결해진다.
	- Java 8 출시
	- 목적" 컬렉션(배열) 조작
	
	- 자바의 메소드를 표현하는 방법 중 하나로 사용
	- 메소드를 대신하는 코드블록
	- 자바의 람다식은 인터페이스를 사용해서 만든다.
	- 자바의 람다식은 익명 객체(추상 메소드)를 만드는 표현을 간소화시킨 기술이다.
	
	- 인터페이스 변수 = 람다식
		~ MyInterface m3 = () -> {};
		
		(매개변수) -> {구현부};
		a. (매개변수): 메소드의 인자리스트
		b. -> : 구현부를 호출하는 역할
		c. {}: 메소드의 구현부
		
	- 람다식을 저장하는 인터페이스는 반드시 fuctional Interface이어야 한다.
		※fuctional interface: 추상 메소드를 1개만 가지는 인터페이스
	
	- ★★람다식 구현부에 있는 실행 문장이 한 줄이면 {}을 생략할 수 있다. 
		~ NoParameterNoReturn pr3 = () -> System.out.println("pr3");										//void call();
		
	- ★★람다식 구현부에 있는 실행 문장이 return문이 유일하면 {}와 return 모두 생략할 수 있다. 							
		~ NoParameterReturn pr12 = () -> 200;																//int call();
		
	- ★★매개변수의 자료형을 생략할 수 있다.
		~ MultiParameterNoReturn pr9 = (name, age) -> {System.out.println("pr9: " + name + ", " + age);};	//void call(String name, int age);
		
	- ★★매개변수가 한 개일 경우만 소괄호()를 생략할 수 있다. > 없거나 2개 이상이면 생략 불가
		~ ParameterNoReturn pr5 = n -> System.out.println("pr5: " + n);										//void call(int n);

//함수형 인터페이스, Function Interface
	- 평범한 인터페이스
	- 목적: 람다식을 저장하기 위해서 만들어진 인터페이스
	
	a. 표준 API 함수형 인터페이스	> JDK 제공	
		1. Consumer :(매개변수) -> {}
			- 매개변수를 받아서 소비하는 업무를 구현하는 인터페이스 > 인자 O, 반환 X
			- void acceptXXX(); 추상메소드 제공			
			
			~ Consumer<T>
			~ BiConsumer<T,U>
		
		2. Supplier : () -> { return 값; }
			- 매개변수를 없이 반환값을 돌려주는 업무를 구현하는 인터페이스 > 인자 X, 반환 O
			- T getXXX(); 추상 메소드 제공		
		
			~ Supplier<T>			
			
		3. Function : (매개변수) -> { return 값; }
			- 매개변수를 전달하면, 처리 후 반환값을 돌려주는 업무를 구현하는 인터페이스 > 인자 O, 반환 O
			- R applyXXX(T t); 추상 메소드 제공	
			
			~ Function<T,R>
			~ BiFunction<T,U,R>	
		
		4. Operator : (매개변수) -> { return 값; }
			- 매개변수를 전달하면, 처리 후 반환값을 돌려주는 업무를 구현하는 인터페이스 > 인자 O, 반환 O
			- 추상 메소드의 매개변수와 변환값의 자료형이 동일하다.
			- 연산자와 메소드는 성질이 같다.			
			- Function의 하위셋
			- 행동 > 연산자 역할
			- R applyXXX(T t, U u); 추상 메소드 제공	
		
			~ UnaryOperator<T> 	// extends Function<T, R>
			~ BinaryOperator<T>	// extends BiFunction<T, U, R>
			
		5. Predicate : (매개변수) -> { return 값; }
			- 매개변수를 전달하면, 처리 후 반환값을 돌려주는 업무를 구현하는 인터페이스 > 인자 O, 반환 O
			- 논리 검사 전용 > Boolean 반환
			- Function의 하위셋
			- 행동 > 판단 역할
			-boolean test(T t); 추상 메소드 제공				
			
			~ Predicate<T>
			~ BiPredicate<T,U>	
	
	b. 사용자 정의 함수형 인터페이스	> 개발자가 선언
	
	
