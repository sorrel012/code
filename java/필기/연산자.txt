1. 문장, Statement
	- 1개 이상의 표현식이 모여서 문장을 만든다.
		~ int sum = 10 + 20;
			
2. 표현식, Expression
	- 문장을 구성하는 최소 단위
		~ int sum
		~ 10 + 20
		~ sum = 30
	
3. 연산자, Operator
	- 피연산자를 대상으로 미리 정해진 연산(행동)을 한 후에, 연산(행동)의 결과를 반환하는 요소
	- 주로 기호를 많이 사용 + 영단어도 많이 사용
		~ +
		~ =
	
4. 피연산자, Operand
	- 연산의 대상
		~ +: 10, 20
		~ =: sum, 30
	
5. 연산자 우선순위
	- 하나의 문장에 속해 있는 모든 연산들은 누가 먼저 실행해야 하는지 순서가 정해져 있다.
		~ () > 증감 연산자(전위) > 산술 연산자 > 비교 연산자 > 논리 연산자 > 대입 연산자 > 증감 연산자(후위)
	
6. 연산자 연산 방향
	- 하나의 문장에 속해 있는 연산자들 중 우선순위가 동일하면 어느 방향(좌,우)으로 실행해야 하는지 순서가 정해져 있다.
	- 대부분의 연산자는 왼쪽 -> 오른쪽 방향으로 실행한다.
	- 대입 연산자(=)는 오른쪽 -> 왼쪽 방향으로 실행한다.
		
//연산자 종류
	1. 행동(목적)
		a. 산술 연산자
			- +, -, *, /(몫), %(mod:나머지)
			- 2항 연산자
			- 피연산자로 숫자를 가진다.(정수, 실수)
			- byte, short의 산술 연산은 무조건 int이다. > CPU 처리 단위
			- ★모든 산술 연산자의 결과값 자료형은 두 피연산자의 자료형 중에서 더 크기가 큰 자료형으로 반환된다.
			
		b. 비교 연산자
			- >, >=, <, <=, ==, !=
			- 2항 연산자
			- 피연산자들의 우위(동등) 비교를 하는 연산자
			- 피연산자는 숫자형을 가진다.
			- 연산의 결과가 boolean이다.(true/false)
			- 문자열의 비교는 ==, != 연산자를 절대 사용해서는 안 된다. > equals() 메서드 사용
			 
		c. 논리 연산자
			- &&(and-논리곱), ||(or-논리합), !(not)
			- &(and), |(or), ^(xor-배타적 논리합 : 양쪽이 같으면 false(1), 다르면 true(0))  > 비트 연산자
			- 2항 연산자(&&. ||)
			- 1항 연산자(!)
			- 피연산자의 자료형이 boolean이다.
			- 연산의 결과는 boolean이다.
			 
		d. 대입 연산자
			- = 
			- +=, -=, /=. %= (복합 대입 연산자)
			- LValue(공간) = RValue(값)
			- LValue와 RValue의 자료형은 동일해야 한다.(100%)
			- LValue와 RValue의 자료형이 다르면 에러 발생! 
			- 연산자 순위가 가장 낮다.
			
			
		e. 증감 연산자
			- ++(증가), --(감소)
			- 1항 연산자
			- 피연산자는 숫자형을 가진다.
			- 누적 연산을 한다. > 기존의 값에 +1, -1
			※ 피연산자의 위치가 바뀔 수 있다. > 되도록 증감 연산자는 다른 연산자와 한 문장에서 사용하지 말 것.
			    ~ ++n: 전위 배치(전치) > 연산자 우선 순위 가장 높음
			    ~ n++: 후위 배치(후치) > 연산자 우선 순위 가장 낮음
			
		f. 조건 연산자
			- ?:
			- A ? B : C
			- 3항 연산자
			- A: 조건(boolean)
			- B,C: 결과(상수,변수)
			
		+ 문자열 연산자, concat
			- + -
			- 문자열 + 문자열, ★숫자 + 문자열
			- 숫자 + 문자열의 경우 연산자 연산 방향에 특히 주의해야 한다.
			    ~ "10" + 20 + 30 > "102030"
				
			
	
	2. 형태(피연산자 개수) 
		a. 1항 연산자
		b. 2항 연산자
		c. 3항 연산자
		
