// 스프링, Spring 일정
    - 1주 : 수업만 > 구직활동(주말)
    - 2주 : 수업만 + 후반부 오후(프로젝트 시작) > 구직활동(주말)
    - 3주 : 오전(수업) + 오후(프로젝트)
    - 4주 : 프로젝트(만 하려고는 하는데 진도 봐서 수업도 할 수도 있음....)
    - 마지막 프로젝트 2주

    *팁 : 6월 말에 취업해서 스프링 질문 스리슬쩍 넘어가기..


// 잡코리아, 사람인
    - 자바 개발자, 웹 개발자, 응용 프로그램 개발자
    - 첫 직장 > 꼭 자바 아니어도 됨..! ex) C#(조금 더 좋은 회사일 가능성이 有)
    - 신입 모집에만 지원 X, 경력 모집에도 지원해보기! 팀장까지도..
    - 면접 때 회사를 고르기...이력서 넣을 때 말고..
    - 24~25일 > 회사 리스팅 > 100~200군데(1~2시간 정도) > 일요일 오후 지원


// 학습 난이도
    Servlet/JSP: 초반(쉬움) > 후반(어려움)
    Spring: 초반(어려움) > 후반(쉬움) >> 프레임워크


// Spring Framework(틀)
    - http://spring.io
    - Spring 1.0 ~ 6.0
    - Spring 3.XX ~ 5.XX > 우리 수업은 Spring 5.XX
    - 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크
    - 콘솔 프로그램 or 응용 프로그램 or 웹 응용프로그램 > 대부분 웹 응용 프로그램
    - Servlet/JSP 버전업!
    - 전자 정부 표준 프레임워크로 채택 > Spring 기반 > 공공기관 프로젝트 or 대기업


// 스프링 프로젝트
    - Spring
    - Spring MVC
    - Spring AOP
    - Spring Data
    - Spring Boot
    - Spring Security
    - ...


// 스프링 프레임워크 구성 요소(주요 기술)

    1. POJO 기반
    2. 의존성 주입 지원(DI)
    3. 관점 지향 프로그래밍 지원(AOP)
    4. Spring MVC
    5. 레이아웃 지원(Tiles)
    6. 데이터베이스 연동 지원
        - JDBC
        - Spring JDBC (X)
        - ORM(JPA) > Hibernate (O)
        - MyBatis > 점유율 1위 (O)


// 개발 환경
    - OpenJDK 11(X) > Oracle JDK 11(O)
    1. Eclipse 사용 > 설정할 게 많음 > 손이 많이 감...
    2. Eclipse + 확장 프로그램(STS) > 간편!
    3. STS(Eclipse가 들어 있음) > 간편 
        - STS 3.X > Spring 개발
        - STS 4.X > Spring Boot 개발

    JAVA_HOME > C:\Program Files\Java\jdk-11

    sts-bundle
        - sts-3.9.18.RELEASE > STS
        - pivotal-tc-se

     C:\Program Files\Java\jdk-11\bin

     STS.ini > 메모장에서 vm 설정 + 롬복 설치 됐는지 확인(java -jar lombok) > sts 폴더 잡기

    Tomcat 9 > 9.0.76 > 64-bit Windows zip    

    - tomcat server.xml 에서 포트번호 8091로 변경(2개)

    초기 세팅
        1. encoding > UTF-8


// 스프링 구성 요소
    - DI
    - AOP


// 프로젝트 생성하기
    - New > Spring Legacy Project 
               > Spring MVC Project
               > name : "BeginTest"
               > "com.test.begin"


// Spring MVC Project > 프로젝트 구조

    1. src/main/java
        - 여태까지 사용하던 Java 소스 폴더
        
    2. src/main/resources
    	- Java 소스 이외의 자원 폴더
    	- 주로 스프링 설정 파일들을 보관
    
    3. src/test/java
    	- 테스트용
    	
    4. src/test/resources
    	- 테스트용	

	5. JRE System Library
	    - JRE jar
	    - JavaSE-1.6 > JDK 1.6  > JDK 11 버전으로 수정 필요
	
	6. Maven Dependencies
		- 메이븐(빌드 도구, 라이브러리 관리 도구 등)
		- 프로젝트 생성 & 유지 관리 & 배포를 도와주는 프로그램
		- 수업용 > jar 파일 관리
	
	7. src
    	- 1~4번까지의 폴더를 물리적으로 표현 > 윈도우 탐색기처럼 표시 
    	
    	7.1 webapp
    		- 웹 루트 폴더
    	
    	7.2 webapp > resources
    		- CSS, JavaScript, Images 등을 저장하는 폴더
    		- 강제력(X) > 권장(O)
    		
    	7.3 webapp > WEB-INF
    	
    		7.3.1 classes
    			- 컴파일된 클래스 파일 저장폴더(이전에 bin)
    			- 개발자 관여 X
    			
    		7.3.2 spring ★★★★★★
    			- 스프링의 모든 설정
    			
    			7.3.2.1 appServlet
    				- servlet-context.xml : 스프링 설정 파일(스프링 MVC, 웹 관련)
    			
    			7.3.2.2 root-context.xml : 스프링 설정 파일(스프링 전반)
    			
    		7.3.3 views
    			- 뷰 페이지 폴더
    			
    		7.3.4 web.xml
    			- 아파치 톰캣 서버 설정
    			
    	7.4 pom.xml, Project Object Model
    		- 메이븐 프로그램 설정 파일
    		
    C:\Users\user\.m2\repository >> 메이븐이 다운로드한 jar 보관 폴더
    
    
    
// Spring DI, Spring AOP
	- 스프링 기술 (X)
	

// Spring DI
	- DI : 디자인 패턴
	- Dependency Injection
	- 의존(성) 주입
	- 스프링에서 중요한 개념 > 스프링의 모든 객체 관리에 사용
	- 프로그래밍에서 구성 요소 간의 의존 관계가 소스 내부가 아닌 외부 환경에서 정의되게 하는 디자인 패턴
	
	1. XMl 방식
	2. 어노테이션 방식
	
	- 의존 관계?
	- src/main/java > "com.test.di01" 패키지 생성	
					> Main.java
					
					> Hong.java
					> Pen.java
					
					> Lee.java
					> Brush.java
	
	- src/main/java > "com.test.di02"
					> Main.java					
					> Hong.java
					> Pen.java
					> Lee.java
					> Brush.java
					> di02.xml
					
					
	- src/main/java	> "com.test.di03"
					> Hong.java
					> Pen.java
	
	- src/test/java	> "com.test.di03"
					> DITest.java		
					
	- src/main/java	> "com.test.di04"							
					> BoardController.java		> 컨트롤러(흐름 통제)
					> BoardService.java(I)		> OOOService. 주업무 객체(연결 부위)
					> BoardServiceImpl.java(C)	> OOOServiceImp. 주업무 객체(알맹이)
					> BoardDAO.java(I)			> OOODAO. 데이터 객체
					> BoardDAOImpl.java(C)
					
	- src/test/java	> "com.test.di04"
					> XMLTest.java
					> AnnotationTest.java
					
	
// Spring AOP, Aspect Oriented Programming
	- 관점 지향 프로그래밍
	- 관점, 관심사 > 코드를 작성하는 데 필요한 주업무가 아닌, 나머지 신경써야할 보조 업무 
	- 핵심 업무는 아니지만, 코드를 완성하기 위해서 필요한 나머지 업무들
	- Concern > 관심사, 관점
	
	[게시판 글쓰기]
	1. 기존 방식
		- Add.do
			a. 글쓰기 : 주업무
			b. 권한 체크 : 보조업무
		- 주업무와 보조업무를 같은 곳에서 구현(한 파일에서 구현)
		
	2. AOP 방식
		- Add.do
		- 주업무와 보조업무를 분리시켜서 따로 구현하자 > AOP 목적
		- 스프링을 통해서 주업무와 보조업무를 다시 결합 후 동작
		
	- 용어
		1. Core Concern
			- 비즈니스 코드, 주업무
		
		2. Cross-cutting Concern
			- 보조업무
		
		3. Target
			- 순수한 비즈니스 로직을 소유한 객체
			- 객체
		
		4. Proxy
			- Target을 감싸고 있는 객체
		
		5. JoinPoint
			- Target이 가지고 있는 메소드(주업무)
			
		6. Pointcut
			- 보조업무와 어떤 JoinPoint에 연결하는 작업
			
		7. Aspect
			- 보조업무를 구현하는 객체
			
		8. Advice
			- 주업무가 실행되는 어느 시점에서 보조 업무를 실행할지?
			
			- Before Advice
				- 주업무가 실행되기 전에 보조업무를 실행
				
			- After Advice
				- 주업무가 종료된 후에 보조업무를 실행
				
			- Around Advice
				- 주업무 실행 전후에 보조업무를 실행
				
			- After-returning Advice
				- After Advice와 유사
				- 주업무가 성공했을 때만 실행
			
			- After-throwing Advice
				- 예외가 발생할 때만 실행
	
	1. XML 방식
		- "com.test.aop1" 패키지 생성
					> Main.java 		//메인
					
					> Memo.java(I)		//메인 업무 객체(인터페이스)
					> MemoImpl.java(C)	//메인 업무 객체(클래스)				
	
					> Logger.java(C)	//보조 업무 객체(클래스)
					
					> memo.xml			//스프링 설정 파일(<beans>)
	2. 어노테이션 방식	
		