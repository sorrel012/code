
// 스프링 시큐리티
	- 기존 Servlet/JSP > 인증(증명, 인증 티켓) + 허가(권한) > 세션 기반 인증
	- 동작 방식 > 서블릿 필터와 스프링 인터셉터를 사용하여 보안을 처리
	
	
	- 일괄 설정
		
	- 스프링 시큐리티 설정
		
		~ pom.xml : 의존성 4개 추가
			<dependency>
			   <groupId>org.springframework.security</groupId>
			   <artifactId>spring-security-web</artifactId>
			   <version>5.0.7.RELEASE</version>
			</dependency>
			
			<dependency>
			   <groupId>org.springframework.security</groupId>
			   <artifactId>spring-security-config</artifactId>
			   <version>5.0.7.RELEASE</version>
			</dependency>
			
			<dependency>
			   <groupId>org.springframework.security</groupId>
			   <artifactId>spring-security-core</artifactId>
			   <version>5.0.7.RELEASE</version>
			</dependency>
			
			<dependency>
			   <groupId>org.springframework.security</groupId>
			   <artifactId>spring-security-taglibs</artifactId>
			   <version>5.0.7.RELEASE</version>
			</dependency>
			
			
		~ /webapp/WEB-INF/spring/ > security-context.xml
			- root-context.xml, servlet-context/xml 처럼 스프링을 설정하는 파일(Context)
			- 기존 컨텍스트와 분리해서 설정할 수 있다. > 단독 설정
			- Spring Bean Configuration File
			- xsi:schemaLocation에서 5.0 버전 지우기
		
		~ web.xml
			- 스프링 시큐리티가 스프링 MVC에서 사용 > 필터를 사용해서 스프링 시큐리티가 스프링 동작에 관여할 수 있도록 설정(필터 등록)				
			1. security-context.xml 인식 > web.xml 추가
			2. security-context.xml 기본 구문 설정
			

// 테스트를 위한 URI 설계
	- 통제가 필요한 URI를 설계 + 스프링 시큐리티를 적용
	
	- /index.do  > 로그인(O), 로그인(X) > 모든 사용자 접근 가능
	- /member.do > 로그인(O) > 회원만 접근 가능
	- /admin.do  > 로그인(O) > 회원 중 관리자 권한이 있는 사용자만 접근 가능
	
	
	- 파일 생성
		
		~ "com.test.controller" > Test.Controller.java
		
		~ views > index.jsp
				> member.jsp
				> admin.jsp
				> template.jsp
		
		~ views > "inc" > header.jsp


// 인증, Authentication & 허가(권한부여, Authorization)

	- 스프링 시큐리티
		~ AuthenticationManager
			- 인증 매니저
			- 가장 중심 + 가장 중요한 역할
			- 인증을 담당한다.
			
		~ AuthenticationProvider
			- 인증 제공자
			- 실제로 인증 작업을 진행한다.
		
		~ UserDetailsService
			- 사용자 정보 + 사용자 권한 관리		
			
			
// 로그인, 로그아웃 > 인증			

	~ security-context.xml 수정
	
	- 단순 로그인 처리
		- 자동 생성 로그인 페ㅣ지 사용
		- 계정 정보 > XMl 정의 > 메모리 상에서 관리 
		~ security-context.xml 수정
		
		- There is no PasswordEncoder mapped for the id "null"
		- 스프링 4버전까지는 암호 유무 선택
		- 스프링 5버전부터는 반드시 구현 > PasswordEncoder 사용
		
	- 관리자 사용자 설정
		1. 비회원(X)
		2. 회원('ROLE_MEMBER') 
		3. 관리자('ROLE_MEMBER', 'ROLE_ADMIN')


	- 접근 권한 메시지 처리
		- 로그인을 한 상태에서 접근 불가능한 URI를 접근하면 에러가 발생 > 403
		1. AccessDeniedHandler 직접 구현
			~ "com.test.auth" > CustomAccessDeniedHandler.java
		
		2. 단순 URI 지정 > forward

	- 에러 페이지 작성
		~ "com.test.controller" > AuthControler.java
		~ views > accesserror.jsp


// 로그인 페이지
	- 직접 로그인 페이지 구현 > URI 지정
	
	~ AuthController.java>  로그인 페이지 추가
	~ views > customlogin.jsp
	
	- <form>의 action이 "/login"이다. + POST
	- <input name="username">, <input name="password"> 의 name이 예약어이다.★★★★★		
		※ 스프링 시큐리티에서 username의 의미★★★ 
		- 일반 시스템(userid) == 스프링 시큐리티(username)
		- '홍길동' != username
		- 'hong' == username
		
	- <input type="hidden" name="_csrf" value="1219d8e6-7f5c-4391-89b0-9ca958ef675e">
		※ CSRF, Cross-site request forgery
			- CSRT 공격 > 토큰
			- <security:csrf disabled="true" />	
	
	- "/login" + GET 요청 > /customlogin.do 호출  
	

// 로그인 > 후속 동작
	- 로그인 성공 후에 특정한 동작을 하고 싶을 때
	- AuthenticationSuccessHandler 인터페이스를 구현
	
	~ "com.test.auth" > CustomLoginSuccessHandler.java	
	
	
// 로그아웃
	- 로그인처럼 URI 지정, 핸들러 등록	

	~ AuthController.java > 메소드 추가
	
	~ views > customlogout.jsp
	

// 계정 정보
	- XMl > <security:user name="hong" password="{noop}1111" authorities="ROLE_MEMBER">
	- InMemoryUserDetailsManager를 사용한 방식
	
	
	- 데이터베이스를 활용한 계정 정보
		1.미리 정해진 구조의 스키마 사용	> 편해짐 > 제약 심함		
			~ SecurityTest > script.sql			
			~ "com.test.auth" > CustomNoOpPasswordEncoder.java
			
		2. 사용자가 직접 만든 구조의 스키마 사용 > 불편함 > 제약 약함		
			- 스프링 시큐리티에서 제공하는 기본 스키마 말고, 사용자가 직접 설계한 스키마로 적용
			※ 스프링 시큐리티
				- BCryptPasswordEncoder 클래스를 사용
				- bcrypt(Blowfish > 암호화 해시 함수)
				- 암호화 가능, 복호화 불가능
			
			- 인증을 하는 데 사용할 쿼리
						
				select 
					userid username,
					userpw password,
					enabled
				from tbl_member
					where userid = 'hong'
					
			- 권한을 확인하는 데 사용할 쿼리
			
				select 
					userid username,
					auth authority
				from tbl_member_auth
					where userid = ?
					
			~ src/test/java > com.test.security > MemberTest.java(정보)
			
			~ src/test/java > com.test.security > MemberTest2.java(권한)
			

// 회원가입 구현

	1. "src/main/resources" > com > test > mapper > MemberMapper.xml
	
	2. "com.test.domain"	> MemberDTO.java
						    > AuthDTO.java
					    
	3. "com.test.controller" > MemberController.java > register 메소드 구현
	
	4. views > inc > header > link 추가		
	
	5. root-context.xml > mybatis-spring:scan 추가
	
	6. views > register.jsp
			
	7. "com.test.controller" > MemberController.java > registerok 메소드 구현
	
	8. "com.test.mapper" > MemberMapper.java(I)
		
	9. "src/main/resources" > com > test > mapper > MemberMapper.xml > insert 쿼리 짜기
	
	10. "com.test.controller" > MemberController.java > registerok 권한 구현
	
	11. "com.test.mapper" > MemberMapper.java(I)
	
	12. "src/main/resources" > com > test > mapper > MemberMapper.xml > 권한 insert 쿼리 짜기
	
	13. views > registerok.jsp			
	
	
// UserDetailsService
	1. taglib sec 사용
		> username(id), userpassword, enabled, authority
		~ index.jsp (taglib 추가)
		
	2. 추가로 관리하고 싶은 정보가 있으면 직접 UserDetailsService를 구현
		- 우리가 가져오고 싶은 정보 > SQL
			1. MemberDTO
			2. AuthDTO
			3. MemberMaper(I) > mapper.read() 
			   MemberMapper.xml
			   
			4. src/test/java > "com.test.mapper" > MapperTest.java 
			
			5. com.test.auth > CustomUserDetailsService.java
			
			6. security-context.xml > bean 등록
			
			7. com.test.domain > CustomUser.java
			
			8. views > inc > header > link 추가	
			
			9. views > info.jsp
			

// 시큐리티 표현식	
	- hasRole()
	- isAnonymous()
	- isAuthenticated()
	
	~ views > inc > header
