
// REST(Representational State Transfer) API, RESTful Service
	- 웹상의 자원(문서, 이미지, 동영상, 데이터 등)을 자원명으로 표시해서 자원의 상태를 주고받는 행위	
	- HTTP URI를 통해서 자원을 명시하고, HTTP Method를 통해서 자원에 대한 CRUD 처리하는 방식
	
	URI(URL) 표기 방식
	
	
// 게시판 구현
	
	1. 여태 사용한 구현 방식 > URI 표현
		- 목록보기		GET		http://localhost/board/list.do
		- 추가하기		POST	http://localhost/board/add.do	
		- 수정하기		POST	http://localhost/board/edit.do	
		- 삭제하기		POST	http://localhost/board/del.do
		- 검색하기		GET	 	http://localhost/board/list.do?word=검색어
		
	2. REST 방식
		- 목록보기 	GET		http://localhost/board
		- 추가하기 	POST	http://localhost/board + 데이터(패킷 저장)
		- 수정하기 	PUT		http://localhost/board/1 + 데이터(패킷 저장)
		- 삭제하기 	DELETE	http://localhost/board/1
		- 검색하기		GET		http://localhost/board/검색어
		

// REST API 설계 규칙
	1. URI에 자원을 표시한다. > 마지막 단어가 자원 표현
	
	2. URI에 동사를 표시하지 않는다.
	
	3. HTTP Method를 사용해서 행동을 표현한다.
		a. GET : 리소스 요청
		b. POST : 데이터 전달 + 서버측 생성
		c. PUT : 데이터 전달 + 수정(전체 수정 > 레코드의 모든 컬럼 수정)
		d. PATCH : 데이터 전달 + 수정(전체 수정 > 레코드의 일부 컬럼 수정)
		e. DELETE : 데이터 삭제
		
	4. URI + HTTP Method = REST API
	
	5. 구분자는 '/'를 사용한다.
	
	6. URI의 마지막에 '/'를 적지 않는다.
	
	7. '-' 사용이 가능하다.(가끔)
	
	8. '_' 사용하지 않는다.
	
	9. 소문자로만 작성한다.
	
	10. 확장자를 작성하지 않는다. > 자원명으로 끝나기 때문(확장자 의미X)
	
	
	- 파일 생성
		~ "com.test.domain" > BoardDTO.java
				
		~ "com.text.mapper" > BoardMapper.java 
		
		~ root-context.xml > mybatis scan
		
		~ "com.test.controller" > TestController.java > add()		
		~ Insomnia > 게시판 글쓰기(http://localhost/rest/board) > POST
		
		~ "com.test.controller" > TestController.java > list()		
		~ Insomnia > 게시판 목록 보기(http://localhost/rest/board) > GET
		
		~ "com.test.controller" > TestController.java > edit()		
		~ Insomnia > 게시판 수정하기(http://localhost/rest/board/5) > PUT
		
		~ "com.test.controller" > TestController.java > del()		
		~ Insomnia > 게시판 삭제하기(http://localhost/rest/board/5) > DELETE
		
		~ "com.test.controller" > TestController.java > get()		
		~ Insomnia > 게시판 상세보기(http://localhost/rest/board/5) > GET
		
		
	@RestController를 사용하면 메소드마다 @ResponseBody를 붙여주지 않아도 된다.
	@RequestBody 붙여주기(JSON으로 받을 때...)
		
		
		