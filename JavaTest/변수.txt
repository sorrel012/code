//변수, Variable
	- 변화가 있는 데이터
	
	- 개발자가 명령어를 사용해서 메모리에 할당 받은 공간
	
	- 그 공간에 이름을 붙여 놓음.
	
	- 변수명 만들기 > 모든 이름을 생성할 때의 규칙
		1. 영문자 + 숫자 + 특수문자(_)
		2. 숫자로 시작 불가능
		
	- 변수명은 중복될 수 없다. > 유일해야 한다.
		~ 뒤에 숫자를 붙이는 방법은 비권장.
		
	- 그룹 선언 및 초기화가 가능하다.
		~ int eng1, eng2, eng3;
		~ int eng1 = 100, eng2 = 90, eng3 = 80;
		~ int eng1 = 100, eng2, eng3;

	1. 생성하기(선언하기)
		- 자료형 변수명;
			~ int number;
			~ char ch;
			~ boolean isWeekDay;
		
	2. 초기화하기
		- 변수명 = 값;
			~ number = 10;
			~ ch = 'h';
			~ isWeekDay = true;
	
	2.5 치환하기(기존의 데이터에 덮어쓰기)
		- 변수명 = 값;
			~ number = 14;
			~ ch = 's';
			~ isWeekDay = false;
			
	3. 사용하기(입출력)
		- System.out.println(number);
		
//명명법 패턴
	1. 헝가리언 표기법
		- 식별자를 만들 때 식별자의 접두어로 해당 자료형을 표시하는 방법
			~ int int_engscore;
			~ int intEngscore;
			~ int iEngscore;
			
	2. 파스칼 표기법
		- 식별자 단어의 첫문자를 대문자로 표기 + 나머지 문자는 소문자로 표기
		- 2개 이상의 단어로 만든 합성어 > 각 단어의 첫문자를 대문자로 표기
			~ int EngScore;
		※자바에서 클래스명에 주로 사용
	
	3. 캐멀 표기법
		- 식별자 단어의 첫문자를 소문자로 표기 + 나머지 문자도 소문자로 표기
		- 2개 이상의 단어로 만든 합성어 > 각 단어의 첫문자를 대문자로 표기
			~ int engScore;
			~ int myEngScore;
		※자바에서 메소드명, 변수명에 주로 사용
		
	4. 스네이크 표기법
		- 되도록 전부 소문자로 표기
		- 2개 이상의 단어를 언더바(_)로 연결
			~ int eng_score;
	
	5. 케밥 표기법
		- 2개 이상의 단어를 하이픈(-)으로 연결 ※자바는 '-'를 연산자로 인식하기 때문에 사용 불가!
			~ int eng-score;
			
//상수(final 변수)
	- 값을 한 번 할당하면 더 이상 수정할 수 없는 변수
	- 상수명은 반드시 모두 대문자로 작성한다.
		~ final double PI = 3.14; //읽기 전용 변수