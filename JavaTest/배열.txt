//배열, Array

	- 자료형 중 하나 > 데이터 저장 구조 + 규칙
	- 참조형
	- 집합 > 집합 자료형 > 데이터를 여러 개 저장할 수 있는 자료형
	- 같은 자료형을 저장하는 집합 > ★같은 자료형 변수들의 집합
	- ★★★요소(element)들은 연속적으로 저장된다.
	- 동일한 성격 + 동일한 자료형 + 데이터가 여러 개 > 배열 사용!
	- 첨자(index)를 붙여서 식별하는 표기법 : 인덱서(Indexer)
	- 배열은 생성 직후에 개발자가 아무 것도 안 해도 자동으로 값이 초기화 됨.
	- 생성자를 통해서 자동 초기화
		~ 초기화 규칙★★★
			1. 정수 배열 > 0
			2. 실수 배열 > 0.0
			3. 문자 배열 > \0
			4. 논리 배열 > false
			5. 참조형 배열 > null		
	
	
	- ★★메모리의 공간은 한 번 할당되면 절대로 늘리거나 줄일 수 없다.★
		> 배열의 길이를 추가로 늘릴 수 없음
		> ★★★★사용할 배열의 길이가 충분한지 미리 예측해야 함.
	
	
//배열 복사★★★★★★★★
	- 변수의 경우 원본을 수정해도 복사본에는 영향을 주지 않는다.
		> Side Effect가 없다. > stack에 만들어짐. 
			
	- 배열(참조형)은 원본을 수정하면 복사본도 수정이 된다. 복사본을 수정해도 원본도 같이 바뀜.
		> Side Effect가 있다.
		
	1. 얕은 복사, Shallow Copy
		- 주소값 복사
		- Side Effect 발생(원본 <-> 수정본)
		- 기본 동작(일반적 복사)
	
	2. 깊은 복사, Deep Copy
		- 실제 값 복사
		- Side Effect 발생x		
		
//정렬
	- 크기 비교 후 재배치
	
	1. 오름차순
		a. 숫자: 작운 수 -> 큰 수
		b. 문자(열): 문자코드 값 순으로
		c. 날짜시간: 과거 -> 미래
		
	2. 내림차순
		a. 숫자: 큰 수 -> 작은 수		
		b. 문자(열): 문자코드 값 역순으로
		c. 날짜시간: 미래 -> 과거
		
//Arrays 클래스
	- 배열과 관련된 작업(기능)들을 미리 제공해주는 클래스	
	- import java.util.Arrays;
	
	1. Arrays.toString()
		- 데이터를 가지는 공간 내부의 상태를 문자열로 반환 > 행동 > 덤프(dump)
		
	2. Arrays.copyOf(), Arrays.copyOfRange()
		- 깊은 복사
		
//n차원 배열

	- 1차원 배열 > 단일 for문으로 탐색
		~ int[] nums1 = new int[3];
		
	- 2차원 배열 > 2중 for문으로 탐색
		~ int[][] nums2 = new int[2][3]; //행, 열
		
	- 3차원 배열 > 3중 for문으로 탐색
		~ int[][][] nums3 = new int[2][2][3]; //면, 행, 열
	
	