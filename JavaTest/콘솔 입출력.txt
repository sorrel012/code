//콘솔 입출력
	- 콘솔 환경에서 프로그램 > 데이터를 입출력
	- Console Input Output > IO
	- 기본 입력 장치: 키보드
	- 기본 출력 장치: 모니터
	
//콘솔 출력
	- 클래스.필드.메소드();
	
	1. System.out.println(값)
		- println 메소드
		- print line > 값을 행 단위로 출력한다. > 값을 출력한 뒤 엔터를 친다.
		
	2. System.out.print(값)
		- print 메소드
		- 값을 출력한 뒤 엔터를 치지 않는다.
		
	3. System.out.printf(값)
		- printf 메소드
		- print format > 출력 형식 조작 > 출력
		- 가독성 향상
		- 형식 문자 제공		
			~ 형식 문자, Place Holder
				1. %s > String 
				2. %d > Decimal(정수) > byte, short, int, long
				3. %f > Float(실수) > float, double > 소수점 아래 6번째 자리까지 출력
				4. %c > char
				5. %b > boolean	
				※%s는 모든 자료형을 출력할 수 있다.(예외) 그렇지만 무조건 형식에 맞는 형식 문자를 사용해야 함!
 
			~ 숫자 + 형식문자
				- 숫자: 출력할 너비를 지정한다.
				- 탭문자처럼 출력 내용을 서식 지정하는 역할
				- + : 우측 정렬(default)
				- - : 좌측 정렬
					~ System.out.printf("[%10d]", 123); 		
					
			~ %숫자1.숫자2f
				- 숫자1: 출력할 너비 지정 > 소수점도 한 자리 차지함! 
				- 숫자2: 소수점 아래 자릿수 지정 > 반올림 되어 나타남.
				
			~ %,d. %,f
				- 자릿수 표기(천단위 표기, 3자리)

//콘솔 입력
	- 사용자의 입력을 받음.
	
	1. System.in.read()
		- 불편함
		- read() 메소드
		- System.out.print()의 반대 기능
		- 사용자가 키를 입력하기를 대기하고 있는 상태 (프로그램이 잠시 멈춰 있는 상태) > 사용자가 입력 후 enter을 입력해야 함.
		- 입력값을 int형으로 반환
		- 사용자가 입력한 문자를 한 개씩 읽어옴.
		- 1byte 문자만 입력 가능(한글 입력 불가)
		※ 사용자가 입력한 데이터는 버퍼에 저장된다. 그 후 read()가 한 글자씩 순서대로 가져간다. (엔터에 해당하는 \r, \n 도 포함)
		
		
	2. BufferedReader 클래스
		- 편함
		- import java.io.BufferedReader;
		- import java.io.InputStreamReader;
		- BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); // 입력 도구 생성하기
		- 메인 메서드에 throws Exception 필요
		- reader.read(): int형으로 반환
		- reader.readLine(): String형으로 반환
		- 2byte 문자를 입력 받음(한글 입력 가능)
		
		
	3. Scanner 클래스
		- 아주 편함
		- import java.util.Scanner;
		- Scanner scan = new Scanner(System.in);
		- scan.nextLine(): String 형으로 반환 > 한 줄
		- nextInt() 사용 후 nextLine()을 쓰려고 할 때 입력이 불가한 경우가 있는데, nextLine()이 개행문자를 포함하기 때문이다.
			~ scan.nextLine()을 그 사이에 한 번 넣어주면 정상적으로 작동한다.
				
	