// JDBC, Java Database Connectivity
    - 응용 프로그램과 데이터베이스를 연결하는 기술
    - 영속성 계층(Persistance Layer)
    
    1. JDBC
    2. Spring-JDBC
    3. MyBatis
    4. JPA
    
    
// JDBC 준비과정
    - 각 데이터베이스 제조사별로 관련 클래스 제공 > *.jar
    - ojdbc6.jar
    - 프로젝트 > Build Path > 참조
    
// java.sql 패키지    

// Java + JDBC > Connection 클래스


// JDBC 클래스
	- 모든 JDBC 작업은 Auto commit이 일어난다.

	1. Connection
		- DB 연결/해제
		
	2. Statement
			- 문장 > SQL 실행
		a. Statement
			- 기본
		b. PreparedStatement
			- 매개변수 특화			
		c. CallableStatement
			- 프로시저 전용
					
	3. ResultSet
		- select 결과 참조 클래스
		

// insert 실행
	1. DB 연결
	2. SQL 실행
		a. 반환값이 없는 쿼리 > select를 뺀 나머지
			- int excuteUpdate()
				> int : 적용된 행의 개수
		b. 반환값이 있는 쿼리 > select
			- ResultSet excuteQuery()
			
			1) 결과셋: 1행 1열
			2) 결과셋: 1행 N열
			3) 결과셋: N행 1열
			4) 결과셋: N행 M열
			
	3. DB 종료		
	

// Statement
	1. Statement
	2. PreparedStatement
	3. CallableStatement	> 프로시저 전용
        

// Statement vs PreparedStatement
    - 매개변수 처리 지원 유무
    - Statement > 정적 SQL > 매개변수 X
    	~ stat = conn.createStatement();
    	  stat.executeUpdate(sql);
    
    - PreparedStatement > 동적 SQL > 매개변수 O
    	- 유효하지 않은 몇몇 문자의 이스케이프 처리를 자동으로 해준다.
    	~ pstat = conn.prepareStatement(sql);
    	  pstat.executeUpdate();         
                

// SQL Injection        
	- 해킹 기술
	
	~ id: hong
	~ pw: 1234
	
	~ 로그인
		"select * from tblUser
			where id = '" + id + "' and pw = '" + pw + "'";
		
		"select * from tblUser
			where id = 'hong' and pw = '1234'";
			
		~ id: hong
		~ pw: 1' or 1=1 or '
		
		"select * from tblUser
			where id = 'hong' and pw = '1' or 1=1 or ''"; > 1=1 때문에 무조건 참 > 로그인 성공		
		
	